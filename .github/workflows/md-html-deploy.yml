name: Workflow to convert Markdown files to HTML and deploy to GitHub Pages

on:
  pull_request:
    branches:
      - main
  # push:
  #   branches:
  #     - main  # Trigger the workflow on push to the main branch
  #     - dev   # Trigger the workflow on push to the dev branch
  #     - feature/*  # Trigger the workflow on push to any feature branch
 
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest  # Use the latest Ubuntu environment

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Check for lock file
      - name: Check for lock file
        run: |
          if [ -f .lock ]; then
            echo "Another workflow is running. Exiting."
            exit 1
          fi
          touch .lock

      # Step 3: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'  # Specify the Node.js version

      # Step 4: Install npm dependencies
      - name: Install dependencies
        run: npm install
        
      # Step 5: Install pandoc for Markdown to HTML conversion
      - name: Install pandoc
        run: sudo apt-get install -y pandoc

      # Step 6: Convert all Markdown files to HTML while preserving directory structure
      - name: Convert Markdown to HTML
        run: |
          mkdir -p _site  # Create the _site directory if it doesn't exist
          # Find all Markdown files and convert them to HTML, preserving directory structure
          find . -name "*.md" -type f | while read file; do
            # Create the corresponding directory in _site
            mkdir -p "_site/$(dirname "$file")"
            # Convert the Markdown file to HTML and save it in the corresponding directory
            pandoc "$file" --standalone --toc -o "_site/${file%.md}.html"
          done

      # Step 7: Deploy the generated HTML files to GitHub Pages
      - name: Deploy to GitHub Pages
        env:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Configure Git with a bot email and name
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git fetch origin
          # Attempt to pull changes and resolve conflicts automatically
          git pull origin ${{ github.ref }} --rebase || git checkout --ours metrics.json
          git add metrics.json
          git commit -m "Resolve conflicts automatically" || echo "No changes to commit"
          # Add all changes, including untracked files
          git add -A
          # Check for changes before committing
          if git diff-index --quiet HEAD --; then
            echo "No changes to commit"
            exit 0
          else
            # Commit the changes
            git commit -m 'Deploy static HTML files'
            # Push the changes to the remote branch
            git push origin HEAD:${{ github.ref }}
          fi

      # Step 8: Remove lock file
      - name: Remove lock file
        if: always()
        run: rm -f .lock
